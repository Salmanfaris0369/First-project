<% include('../layouts/header.ejs')%>



<link
rel="icon"
href="/static/adminfile/assets/img/kaiadmin/favicon.ico"
type="image/x-icon"
/>

<!-- Fonts and icons -->
<script src="/static/adminfile/assets/js/plugin/webfont/webfont.min.js"></script>
<script>
WebFont.load({
  google: { families: ["Public Sans:300,400,500,600,700"] },
  custom: {
    families: [
      "Font Awesome 5 Solid",
      "Font Awesome 5 Regular",
      "Font Awesome 5 Brands",
      "simple-line-icons",
    ],
    urls: ["/static/adminfile/assets/css/fonts.min.css"],
  },
  active: function () {
    sessionStorage.fonts = true;
  },
});
</script>

<!-- CSS Files -->
<link rel="stylesheet" href="/static/adminfile/assets/css/bootstrap.min.css" />
<link rel="stylesheet" href="/static/adminfile/assets/css/plugins.min.css" />
<link rel="stylesheet" href="/static/adminfile/assets/css/kaiadmin.min.css" />

<!-- CSS Just for demo purpose, don't include it in your project -->
<link rel="stylesheet" href="/static/adminfile/assets/css/demo.css" />
</head>
<body>
<div class="wrapper">
<!-- Sidebar -->
<div class="sidebar" data-background-color="dark">
  <div class="sidebar-logo">
    <!-- Logo Header -->
    <div class="logo-header" data-background-color="white">
           
      <img
        src="/static/img/logo.png"
        alt="navbar brand"
        class="navbar-brand"
        height="20"
      />
    
  </div>
    <!-- End Logo Header -->
  </div>
  <div class="sidebar-wrapper scrollbar scrollbar-inner">
    <div class="sidebar-content">
      <ul class="nav nav-secondary">
        <li class="nav-item">
          <a
            data-bs-toggle="collapse"
            href="#dashboard"
            class="collapsed"
            aria-expanded="false"
          >
            <i class="fas fa-homee"></i>
            <p>Dashboard</p>
           </a>
        </li>
       <li class="nav-item">
          <a data-bs-toggle="collapse" href="/admin/categories">
            <i class="fas fa-pen-squaree"></i>
            <p>Categories</p>
          </a>
        </li>
       <li class="nav-item">
          <a data-bs-toggle="collapse" href="/admin/users">
            <i class="fas fa-pen-squaree"></i>
            <p>Users</p>
          </a>
        </li>
        <li class="nav-item active">
          <a  href="/admin/product">
            <i class="fas fa-pen-squaree"></i>
            <p>products</p>
           </a>
         </li>
        <li class="nav-item">
          <a data-bs-toggle="collapse" href="/admin/brand">
            <i class="fas fa-tablee"></i>
            <p>Brands</p>
           </a>
         </li>
        <li class="nav-item">
          <a data-bs-toggle="collapse" href="/admin/order">
            <i class="fas fa-map-marker-altt"></i>
            <p>Orders</p>
         </a>
         </li>
        <li class="nav-item">
          <a data-bs-toggle="collapse" href="/admin/coupon">
            <i class="far fa-chart-barr"></i>
            <p>Coupons</p>
          </a>
         </li>
        <li class="nav-item">
          <a href="/admin/offer">
            <i class="fas fa-desktopp"></i>
            <p>Offers</p>
           </a>
        </li>
        <li class="nav-item">
          <a data-bs-toggle="collapse" href="/admin/logout">
            <i class="fas fa-barss"></i>
            <p>Log out</p>
           </a>
        </li>
      </ul>
    </div>
  </div>
</div>
<!-- End Sidebar -->

<div class="main-panel">
  <div class="main-header">
    <div class="main-header-logo">
      <!-- Logo Header -->
      <div class="logo-header" data-background-color="dark">
        <a href="../index.html" class="logo">
          <img
            src="/static/adminfile/assets/img/kaiadmin/logo_light.svg"
            alt="navbar brand"
            class="navbar-brand"
            height="20"
          />
        </a>
        <div class="nav-toggle">
          <button class="btn btn-toggle toggle-sidebar">
            <i class="gg-menu-right"></i>
          </button>
          <button class="btn btn-toggle sidenav-toggler">
            <i class="gg-menu-left"></i>
          </button>
        </div>
        <button class="topbar-toggler more">
          <i class="gg-more-vertical-alt"></i>
        </button>
      </div>
      <!-- End Logo Header -->
    </div>
    <!-- Navbar Header -->
   
    <!-- End Navbar -->
  </div>

            <!-- FORM -->
           <div class="container">
         <div class="page-inner">
              <div class="page-header">
                <h3 class="fw-bold mb-3">Add product</h3>
                
              </div>


            <div class="row">
                <div class="col-md-12">
                  <div class="card">
            <form  id="productForm" enctype="multipart/form-data">
                    <div class="card-header">
                      <div class="card-title">Product details</div>
                    </div>
                    <div class="card-body">
                      <div class="row">
                        <div class="col-md-6 col-lg-4">
                          <div class="form-group">
                            <label for="email2">Product Name</label>
                            <input
                              type="text"
                              class="form-control"
                              id="email2"
                              placeholder="Enter product name"
                              style="width: 100%;"

                            />
                          
                          </div>
                          <div class="form-group">
                            <label for="password">Category</label>
                            <select class="form-control text-black" name="productCategory">
                                <option value="">Select Category</option>

                                 <% categories.forEach(category=> { %>
                                  <option value="<%= category._id %>">
                                    <%= category.categoryName %>
                                  </option>                           
                                  <% }); %>
                                 
                              </select>
                          </div>
                          <div class="form-group form-inline">
                            <label for="text"
                              class="col-md-3 col-form-label">Brand</label >
                              <select class="form-control text-black" name="productBrand">
                              <option value="">Select brand</option>

                              <% brands.forEach(brand=> { %>
                               <option value="<%= brand._id %>">
                                 <%= brand.brandName %>
                               </option>
                               <% }); %>
                              
                           </select>


                        

                         
                          <div class="form-group">
                            <label>Gender</label><br />
                            <div class="d-flex">
                              <div class="form-check">
                                <input
                                  class="form-check-input"
                                  type="radio"
                                  name="flexRadioDefault"
                                  id="flexRadioDefault1"
                                  value="Male"
                                />
                                <label
                                  class="form-check-label"
                                  for="flexRadioDefault1"
                                >
                                  Male
                                </label>
                              </div>
                              <div class="form-check">
                                <input
                                  class="form-check-input"
                                  type="radio"
                                  name="flexRadioDefault"
                                  id="flexRadioDefault2"
                                  value="Female"
                                  checked
                                />
                                <label
                                  class="form-check-label"
                                  for="flexRadioDefault2"
                                >
                                  Female
                                </label>
                              </div>
                              <div class="form-check">
                                <input
                                  class="form-check-input"
                                  type="radio"
                                  name="flexRadioDefault"
                                  id="flexRadioDefault1"
                                  value="Unisex"
                                />
                                <label
                                  class="form-check-label"
                                  for="flexRadioDefault1"
                                >
                                  Unisex
                                </label>
                              </div>
                              <div class="form-check">
                                <input
                                  class="form-check-input"
                                  type="radio"
                                  name="flexRadioDefault"
                                  id="flexRadioDefault1"
                                  value="Kids"
                                />
                                <label
                                  class="form-check-label"
                                  for="flexRadioDefault1"
                                >
                                  Kids
                                </label>
                              </div>
                            </div>
                          </div>
                          
                          <div class="form-group">
                            <label for="comment">Description</label>
                            <textarea class="form-control" id="comment" rows="5">
                            </textarea>
                          </div>
                    <div class="card-action">
                      <button type="button" class="btn btn-success" id="openModalBtn">ADD</button>
 <button class="btn btn-danger"><a href="/admin/product" style="text-decoration: none;color: white;">Cancel</a></button>
                    </div>
                </form>
                  </div>
                </div>
              </div>
             
            </div>
          </div>

          

           <div id="productModal" class="modal">
            <div class="modal-content">
              <span class="close">&times;</span>
        
              <h2>Add Variants</h2>
              <form id="modalForm" enctype="multipart/form-data">
                <div class="image-upload-container">
                  <div class="image-upload" id="imageUpload1">
                    <input type="file" accept="image/*" onchange="handleImageUpload(event, 1)">
                    <span>Upload Image 1</span>
                  </div>
                  <div class="image-upload" id="imageUpload2">
                    <input type="file" accept="image/*" onchange="handleImageUpload(event, 2)">
                    <span>Upload Image 2</span>
                  </div>
                  <div class="image-upload" id="imageUpload3">
                  <div>  <input type="file" accept="image/*" onchange="handleImageUpload(event, 3)"></div>
                    <span>Upload Image 3</span>
                  </div>                                     
                </div>
                
                <label for="color">Color:</label>
                <input type="text" id="color" name="color" required>
                
                <label for="price">Price:</label>
                <input type="number" id="price" name="price" step="0.01" required>

                <label for="price">Quantity:</label>
                <input type="number" id="quantity" name="quantity" step="1" required>
                <button type="button" id="submitAllData" class="btn btn-primary">Add Product</button>
                <div id="messageContainer"></div>
                </div>
                
                
              </form>
            </div>
          </div>
          
          <div id="cropModal" class="modal">
            <div class="modal-content">
              <h2>Crop Image</h2>
              <div id="cropContainer"></div>
              <button id="cropButton">Crop</button>
            </form>
            </div>
          </div> 


         





  
        

 
</div>


</div>

<style>
  .modal {
display: none;
position: fixed;
z-index: 1000;
left: 0;
top: 0;
width: 100%;
height: 100%;
overflow: auto;
background-color: rgba(0,0,0,0.4);
}

.modal-content {
background-color: #fefefe;
margin: 5% auto; /* Reduced from 15% to 5% to allow for more height */
padding: 20px;
border: 1px solid #888;
width: 90%; /* Increased from 80% to 90% */
max-width: 600px; /* Increased from 600px to 900px */
max-height: 70vh; /* Added max-height */
overflow-y: auto; /* Added scroll for vertical overflow */
}

/* Adjust the crop container size */
#cropContainer {
max-width: 100%;
height: 1000px; /* Increased from 300px to 500px */
margin-bottom: 20px;

}

/* Make sure the cropper doesn't overflow */
.cropper-container {
max-width: 100% !important;
max-height: 70vh !important; /* Limit height to 70% of viewport height */
}

.image-upload-container {
display: flex;
justify-content: space-between;
width: 100%;
}

.image-upload {
width: 30%;
height: 150px;
border: 2px dashed #ccc;
display: flex;
justify-content: center;
align-items: center;
cursor: pointer;
position: relative;
overflow: hidden;
}

.modal-content {
font-size: 14px; /* Increased base font size */
}

.modal-content h2 {
font-size: 24px;
margin-bottom: 20px;
}

.modal-content label {
display: block;
margin-bottom: 5px;
}

.modal-content input[type="text"],
.modal-content input[type="number"] {
width: 100%;
padding: 8px;
margin-bottom: 15px;
font-size: 16px;
}

.sizes-container {
display: flex;
justify-content: space-between;
flex-wrap: wrap;
margin-bottom: 20px;
}

.size-input {
width: 48%;
margin-bottom: 15px;
}

button[type="submit"] {
background-color: #4CAF50;
color: white;
padding: 12px 20px;
border: none;
cursor: pointer;
width: 100%;
font-size: 18px;
}

button[type="submit"]:hover {
background-color: #45a049;
}


#cropModal .modal-content {
width: 95%;
max-width: 700px; /* Even larger for the crop modal */
height: 90vh;
display: flex;
flex-direction: column;
}

#cropContainer {
flex-grow: 1;
display: flex;
justify-content: center;
align-items: center;
overflow: hidden;
}

#cropButton {
margin-top: 20px;
padding: 10px 20px;
font-size: 18px;
background-color: #4CAF50;
color: white;
border: none;
cursor: pointer;
}

#cropButton:hover {
background-color: #323c32;
}



</style>


<script>



  const openModalBtn = document.getElementById("openModalBtn");
    const closeSpan = document.getElementsByClassName("close")[0];
    const modal = document.getElementById("productModal");
    const cropModal = document.getElementById("cropModal");
  const productForm = document.getElementById('productForm');
  const messageContainer = document.getElementById('messageContainer');
  // Image upload and cropping functions
  function handleImageUpload(event, imageNumber) {
    const file = event.target.files[0];
    if (file) {
      currentImageUpload = imageNumber;
      const reader = new FileReader();
      reader.onload = function(e) {
        openCropModal(e.target.result);
      }
      reader.readAsDataURL(file);
    }
  }
  // Image compression function
  function compressImage(file) {
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        const img = new Image();
        img.onload = () => {
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          canvas.width = img.width;
          canvas.height = img.height;
          ctx.drawImage(img, 0, 0);
          canvas.toBlob((blob) => {
            resolve(new File([blob], file.name, {
              type: 'image/jpeg',
              lastModified: Date.now()
            }));
          }, 'image/jpeg', 0.7);
        };
        img.src = event.target.result;
      };
      reader.readAsDataURL(file);
    });
  }

  let currentImageUpload = null;
  let cropper = null;

  // Open modal functions
  openModalBtn.onclick = function() {
    if (validateMainForm()) {
      modal.style.display = "block";
    }
  }

  // Close modal functions
  closeSpan.onclick = function() {
    modal.style.display = "none";
  }

  window.onclick = function(event) {
    if (event.target == modal) {
      modal.style.display = "none";
    }
  }

  

  function openCropModal(imageSrc) {
    cropModal.style.display = "block";
    const cropContainer = document.getElementById('cropContainer');
    cropContainer.innerHTML = `<img src="${imageSrc}" id="imageToCrop">`;
    const image = document.getElementById('imageToCrop');
    
    cropper = new Cropper(image, {
      aspectRatio: 1,
      viewMode: 1,
    });
  }

  document.getElementById('cropButton').addEventListener('click', function() {
    const croppedCanvas = cropper.getCroppedCanvas();
    const resizedCanvas = document.createElement('canvas');
    const ctx = resizedCanvas.getContext('2d');
    
    resizedCanvas.width = 300;
    resizedCanvas.height = 300;
    ctx.drawImage(croppedCanvas, 0, 0, 300, 300);
    
    const resizedImage = resizedCanvas.toDataURL('image/jpeg');
    document.getElementById(`imageUpload${currentImageUpload}`).style.backgroundImage = `url(${resizedImage})`;
    document.getElementById(`imageUpload${currentImageUpload}`).style.backgroundSize = 'cover';
    
    cropModal.style.display = "none";
    cropper.destroy();
  });

   // Form validation functions
function validateMainForm() {
  let isValid = true;
  clearErrorMessages();

  const productName = document.getElementById('email2');
  const productCategory = document.querySelector('select[name="productCategory"]');
  const productBrand = document.querySelector('select[name="productBrand"]');
  const productGender = document.querySelector('input[name="flexRadioDefault"]:checked');
  const productDescription = document.getElementById('comment');

  if (!productName || productName.value.trim() === '') {
    displayError('email2', 'Product name is required');
    isValid = false;
  }

  if (!productCategory || productCategory.value === '') {
    displayError('productCategory', 'Please select a category');
    isValid = false;
  }

  if (!productBrand || productBrand.value === '') {
    displayError('productBrand', 'Please select a brand');
    isValid = false;
  }

  if (!productGender) {
    displayError('flexRadioDefault', 'Please select a gender');
    isValid = false;
  }

  if (!productDescription || productDescription.value.trim() === '') {
    displayError('comment', 'Product description is required');
    isValid = false;
  }

  return isValid;
}

function validateVariantForm() {
  let isValid = true;
  clearErrorMessages();

  const color = document.getElementById('color');
  const price = document.getElementById('price');
  const quantity = document.getElementById('quantity');
  const imageInputs = document.querySelectorAll('#productModal input[type="file"]');

  if (!color || color.value.trim() === '') {
    displayError('color', 'Color is required');
    isValid = false;
  }

  if (!price || price.value.trim() === '' || isNaN(price.value) || Number(price.value) <= 0) {
    displayError('price', 'Please enter a valid price');
    isValid = false;
  }

  if (!quantity || quantity.value.trim() === '' || isNaN(quantity.value) || Number(quantity.value) <= 0) {
    displayError('quantity', 'Please enter a valid quantity');
    isValid = false;
  }

  let imageCount = 0;
  imageInputs.forEach(input => {
    if (input.files.length > 0) imageCount++;
  });

  if (imageCount === 0) {
    displayError('imageUpload1', 'At least one image is required');
    isValid = false;
  }

  return isValid;
}

function displayError(elementName, message) {
  let element;
  if (['productCategory', 'productBrand'].includes(elementName)) {
    element = document.querySelector(`select[name="${elementName}"]`);
  } else if (elementName === 'flexRadioDefault') {
    element = document.querySelector(`input[name="${elementName}"]`);
  } else {
    element = document.getElementById(elementName);
  }

  if (element) {
    const errorSpan = document.createElement('span');
    errorSpan.className = 'error-message';
    errorSpan.style.color = 'red';
    errorSpan.textContent = message;
    element.parentNode.insertBefore(errorSpan, element.nextSibling);
  } else {
    console.error(`Element with name/id '${elementName}' not found`);
  }
}

function clearErrorMessages() {
  const errorMessages = document.querySelectorAll('.error-message');
  errorMessages.forEach(span => span.remove());
}

document.addEventListener('DOMContentLoaded', function() {
  const submitAllDataBtn = document.getElementById('submitAllData');

  // Form submission
  submitAllDataBtn.addEventListener('click', async function() {
    console.log('Submit button clicked');

    if (!validateMainForm() || !validateVariantForm()) {
      return;
    }

    const formData = new FormData();

    // Add main form data
    formData.append('productName', document.getElementById('email2').value);
    formData.append('productCategory', document.querySelector('select[name="productCategory"]').value);
    formData.append('productBrand', document.querySelector('select[name="productBrand"]').value);
    formData.append('productGender', document.querySelector('input[name="flexRadioDefault"]:checked').value);
    formData.append('productDescription', document.getElementById('comment').value);
    
    console.log('Form data initialized');

    // Add variant data
    const variantData = {
      color: document.getElementById('color').value,
      price: document.getElementById('price').value,
      quantity: document.getElementById('quantity').value
    };
    formData.append('variantData', JSON.stringify(variantData));
    console.log('Variant data added:', variantData);
    
    // Process images
    for (let i = 1; i <= 3; i++) {
      const imageInput = document.querySelector(`#imageUpload${i} input[type="file"]`);
      if (imageInput && imageInput.files[0]) {
        const compressedFile = await compressImage(imageInput.files[0]);
        formData.append('images', compressedFile, imageInput.files[0].name);
        console.log(`Image ${i} added`);
      }
    }
    
    // Log all form data
    for (let pair of formData.entries()) {
      console.log(`${pair[0]}:`, pair[1]);
    }

    try {
      const response = await fetch('/admin/product/addProduct', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error('Server responded with an error');
      }

      const data = await response.json();
      messageContainer.innerHTML = `<div class="alert alert-success">${data.message}</div>`;
      modal.style.display = "none";
      productForm.reset();
      setTimeout(() => location.reload(), 1000);
      
    } catch (error) {
      console.error('Error:', error);
      messageContainer.innerHTML = `<div class="alert alert-danger">${error.message}</div>`;
    }
  });
});





// let modal = document.getElementById("productModal");
// let cropModal = document.getElementById("cropModal");
// let btn = document.getElementById("openModalBtn");
// let span = document.getElementsByClassName("close")[0];
// let submitAllDataBtn = document.getElementById('submitAllData')

// let currentImageUpload = null;
// let cropper = null;

// btn.onclick = function() {
//   modal.style.display = "block";
// }

// span.onclick = function() {
//   modal.style.display = "none";
// }

// window.onclick = function(event) {
//   if (event.target == modal) {
//     modal.style.display = "none";
//   }
// }
// span.addEventListener('click', function() {
//     modal.style.display = "none";
//   });

// function handleImageUpload(event, imageNumber) {
//   const file = event.target.files[0];
//   if (file) {
//     currentImageUpload = imageNumber;
//     const reader = new FileReader();
//     reader.onload = function(e) {
//       openCropModal(e.target.result);
//     }
//     reader.readAsDataURL(file);
//   }
// }

// function openCropModal(imageSrc) {
//   cropModal.style.display = "block";
//   const cropContainer = document.getElementById('cropContainer');
//   cropContainer.innerHTML = `<img src="${imageSrc}" id="imageToCrop">`;
//   const image = document.getElementById('imageToCrop');
  
//   cropper = new Cropper(image, {
//     aspectRatio: 1,
//     viewMode: 1,
//   });
// }

// document.getElementById('cropButton').addEventListener('click', function() {
//   const croppedCanvas = cropper.getCroppedCanvas();
//   const resizedCanvas = document.createElement('canvas');
//   const ctx = resizedCanvas.getContext('2d');
  
//   // Resize to 300x300
//   resizedCanvas.width = 300;
//   resizedCanvas.height = 300;
//   ctx.drawImage(croppedCanvas, 0, 0, 300, 300);
  
//   const resizedImage = resizedCanvas.toDataURL('image/jpeg');
//   document.getElementById(`imageUpload${currentImageUpload}`).style.backgroundImage = `url(${resizedImage})`;
//   document.getElementById(`imageUpload${currentImageUpload}`).style.backgroundSize = 'cover';
  
//   cropModal.style.display = "none";
//   cropper.destroy();
// });

// // document.getElementById('productForm').addEventListener('submit', function(e) {
// //   e.preventDefault();



// // _________
// document.addEventListener('DOMContentLoaded',  function() {
//   const openModalBtn = document.getElementById('openModalBtn');
  

//   // Open modal when ADD button is clicked
//   openModalBtn.addEventListener('click',  function() {
//     modal.style.display = "block";
//   });


  

//   // Handle submission of all data
//   submitAllDataBtn.addEventListener('click', async function() {
//     const mainForm = document.getElementById('productForm');
//     const modalForm = document.getElementById('modalForm'); // Ensure your modal form has this ID
//     let mainError = document.getElementById("mainError");
//     let variantError = document.getElementById("variantError");

//     // Collect data from main form
//     const productName = document.getElementById('email2').value;
//     const productCategory = document.querySelector('select[name="productCategory"]').value;
//     const productBrand = document.querySelector('select[name="productBrand"]').value;
//     const productGender = document.querySelector('input[name="flexRadioDefault"]:checked').value;
//     const productDescription = document.getElementById('comment').value;

//     // Collect data from modal
//     const color = document.getElementById('color').value;
//     const price = document.getElementById('price').value;
//     const quantity = document.getElementById('quantity').value;

   

   
//     // Construct the final product data
   

//    const formData=new FormData();
//    formData.append('productName', productName);
//     formData.append('productCategory', productCategory);
//     formData.append('productBrand', productBrand);
//     formData.append('productGender', productGender);
//     formData.append('productDescription', productDescription);
//   const variantData={
//     color:color,
//     price:price,
//     quantity:quantity
//   }
   
//     // .map(img => img.replace('url("', '').replace('")', ''));
// formData.append('variantData',JSON.stringify(variantData))


// function compressImage(file) {
//     return new Promise((resolve) => {
//         const reader = new FileReader();
//         reader.onload = (event) => {
//             const img = new Image();
//             img.onload = () => {
//                 const canvas = document.createElement('canvas');
//                 const ctx = canvas.getContext('2d');
//                 canvas.width = img.width;
//                 canvas.height = img.height;
//                 ctx.drawImage(img, 0, 0);
//                 canvas.toBlob((blob) => {
//                     resolve(new File([blob], file.name, {
//                         type: 'image/jpeg',
//                         lastModified: Date.now()
//                     }));
//                 }, 'image/jpeg', 0.7); // Adjust quality here (0.7 = 70% quality)
//             };
//             img.src = event.target.result;
//         };
//         reader.readAsDataURL(file);
//     });
// }




// for (let i = 1; i <= 3; i++) {
//         const imageInput = document.querySelector(`#imageUpload${i} input[type="file"]`);
//         if (imageInput.files[0]) {
//             const compressedFile = await compressImage(imageInput.files[0])
//             formData.append('images', compressedFile);
//         }
//     }

//     const modal = document.getElementById('productModal');
//     const submitAllDataBtn = document.getElementById('submitAllData');


   

//     // console.log('Product Data:', JSON.stringify(productData, null, 2));



//   // Send the data to the server
//   fetch('/admin/product/addProduct', {
//     method: 'POST',
   
//     body: formData,
//   })
//   document.addEventListener('DOMContentLoaded', function() {
//   const openModalBtn = document.getElementById('openModalBtn');
//   const modal = document.getElementById('productModal');
//   const submitAllDataBtn = document.getElementById('submitAllData');

//   // Open modal when ADD button is clicked
//   openModalBtn.addEventListener('click', function() {
//     modal.style.display = "block";
//   });

//   // Handle submission of all data
//   submitAllDataBtn.addEventListener('click', async function() { // Make this function async
//     const mainForm = document.getElementById('productForm');
//     const modalForm = document.getElementById('modalForm');

//     // Collect data from main form
//     const productName = document.getElementById('email2').value;
//     const productCategory = document.querySelector('select[name="productCategory"]').value;
//     const productBrand = document.querySelector('select[name="productBrand"]').value;
//     const productGender = document.querySelector('input[name="flexRadioDefault"]:checked').value;
//     const productDescription = document.getElementById('comment').value;

//     // Collect data from modal
//     const color = document.getElementById('color').value;
//     const price = document.getElementById('price').value;
//     const quantity = document.getElementById('quantity').value;

//     const formData = new FormData();
//     formData.append('productName', productName);
//     formData.append('productCategory', productCategory);
//     formData.append('productBrand', productBrand);
//     formData.append('productGender', productGender);
//     formData.append('productDescription', productDescription);
    
//     const variantData = {
//       color: color,
//       price: price,
//       quantity: quantity
//     };
    
//     formData.append('variantData', JSON.stringify(variantData));

//     function compressImage(file) {
//       // ... (keep your existing compressImage function)
//     }

//     // Process images
//     for (let i = 1; i <= 3; i++) {
//       const imageInput = document.querySelector(`#imageUpload${i} input[type="file"]`);
//       if (imageInput.files[0]) {
//         const compressedFile = await compressImage(imageInput.files[0]);
//         formData.append('images', compressedFile);
//       }
//     }

//     // Log FormData contents
//     console.log('FormData contents:');
//     for (let pair of formData.entries()) {
//       console.log(pair[0] + ', ' + (pair[1] instanceof File ? pair[1].name : pair[1]));
//     }

//     // Send the data to the server
//     try {
//       const response = await fetch('/admin/product/editProduct', {
//         method: 'POST',
//         body: formData,
//       });

//       const data = await response.json();
// const messageContainer=document.getElementById('messageContainer')
// if(response.ok){
//     messageContainer.innerHTML=`<div class="alert alert-success">${data.message}</div>`;
//     setTimeout(()=>location.reload,1000)
// }

//  if (!response.ok) {
//     messageContainer.innerHTML=`<div class="alert alert-success">${data.message}</div>`;
//         const errorText = await response.text();
//         throw new Error(errorText);
//       }

//       const ndata = await response.json();

//     console.log('Success:', ndata);
//     modal.style.display = "none";
//     document.getElementById('productForm').reset();

//     // Handle success (e.g., show a success message, reset the form)
  
// }catch(error)  {
//     console.error('Error:', error);
//     // Handle error (e.g., show an error message)
//   };
// });
// })
// })
// })

// ______________________________________________________

</script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>



<!--   Core JS Files   -->
<script src="/static/adminfile/assets/js/core/jquery-3.7.1.min.js"></script>
<script src="/static/adminfile/assets/js/core/popper.min.js"></script>
<script src="/static/adminfile/assets/js/core/bootstrap.min.js"></script>

<!-- jQuery Scrollbar -->
<script src="/static/adminfile/assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>
<!-- Datatables -->
<script src="/static/adminfile/assets/js/plugin/datatables/datatables.min.js"></script>
<!-- Kaiadmin JS -->
<script src="/static/adminfile/assets/js/kaiadmin.min.js"></script>
<!-- Kaiadmin DEMO methods, don't include it in your project! -->
<script src="/static/adminfile/assets/js/setting-demo2.js"></script>
<script>
$(document).ready(function () {
  $("#basic-datatables").DataTable({});

  $("#multi-filter-select").DataTable({
    pageLength: 5,
    initComplete: function () {
      this.api()
        .columns()
        .every(function () {
          var column = this;
          var select = $(
            '<select class="form-select"><option value=""></option></select>'
          )
            .appendTo($(column.footer()).empty())
            .on("change", function () {
              var val = $.fn.dataTable.util.escapeRegex($(this).val());

              column
                .search(val ? "^" + val + "$" : "", true, false)
                .draw();
            });

          column
            .data()
            .unique()
            .sort()
            .each(function (d, j) {
              select.append(
                '<option value="' + d + '">' + d + "</option>"
              );
            });
        });
    },
  });

  // Add Row
  $("#add-row").DataTable({
    pageLength: 5,
  });

  var action =
    '<td> <div class="form-button-action"> <button type="button" data-bs-toggle="tooltip" title="" class="btn btn-link btn-primary btn-lg" data-original-title="Edit Task"> <i class="fa fa-edit"></i> </button> <button type="button" data-bs-toggle="tooltip" title="" class="btn btn-link btn-danger" data-original-title="Remove"> <i class="fa fa-times"></i> </button> </div> </td>';

  $("#addRowButton").click(function () {
    $("#add-row")
      .dataTable()
      .fnAddData([
        $("#addName").val(),
        $("#addPosition").val(),
        $("#addOffice").val(),
        action,
      ]);
    $("#addRowModal").modal("hide");
  });
});
</script>





<% include('../layouts/footer.ejs')%>